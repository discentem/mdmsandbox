# do_token value is set in secrets.tfvars
variable "do_token" {}
variable "email" {}
variable "dns_record" {}
variable "micromdm_prefix" {}
variable "micromdm_api_key" {}
variable "mdmdirector_api_key" {}

# Configure the DigitalOcean Provider
provider "digitalocean" {
  # do_token is defined in secrets.auto.tfvars
  token = var.do_token
}

# create postgres cluster
resource "digitalocean_database_cluster" "micromdm-db-cluster" {
  name       = "micromdm-postgres-cluster"
  engine     = "pg"
  version    = "11"
  size       = "db-s-1vcpu-1gb"
  region     = "nyc1"
  node_count = 1
}

# create database for mdmdirector
resource "digitalocean_database_db" "mdmdirector_database" {
  cluster_id = digitalocean_database_cluster.micromdm-db-cluster.id
  name       = "mdmdirector"
}

# template systemd config for micromdm
data "template_file" "micromdm-service" {
  template = "${file("scripts/systemd/micromdm.service.tpl")}"

  vars = {
    full_dns_record = "${var.micromdm_prefix}.${var.dns_record}"
    micromdm_api_key = var.micromdm_api_key
  }
}

# template sytemd config for mdmdirector
data "template_file" "mdmdirector-service" {
  template = "${file("scripts/systemd/mdmdirector.service.tpl")}"

  vars = {
    db_username = digitalocean_database_cluster.micromdm-db-cluster.user
    db_password = digitalocean_database_cluster.micromdm-db-cluster.password
    db_host = digitalocean_database_cluster.micromdm-db-cluster.host
    db_port = digitalocean_database_cluster.micromdm-db-cluster.port
    db_name = digitalocean_database_db.mdmdirector_database.name
    micromdm_api_key = var.micromdm_api_key
    micromdm_server_url = "${var.micromdm_prefix}.${var.dns_record}"
    mdmdirector_api_key = var.mdmdirector_api_key
  }
}

# reference ssh key that we generated by hand
resource "digitalocean_ssh_key" "do_sshkey" {
  name       = "do"
  public_key = file("~/.ssh/do.pub")
}

# Create VM where we will run micromdm and mdmdirector
resource "digitalocean_droplet" "mdm-server" {
  ssh_keys = ["${digitalocean_ssh_key.do_sshkey.id}"]
  # To get image list:
  # curl -X GET "https://api.digitalocean.com/v2/images" -H "Authorization: Bearer $do_token"
  image  = "centos-8-x64"
  name   = "mdm-server"
  region = "nyc1"
  size   = "s-1vcpu-1gb"

  provisioner "remote-exec" {

    connection {
      host        = digitalocean_droplet.mdm-server.ipv4_address
      private_key = file("~/.ssh/do")
      timeout     = "60s"
    }
  }
}

# Setup Micromdm subdomain
resource "digitalocean_record" "micromdm-dns" {
  domain = var.dns_record
  type   = "A"
  name   = var.micromdm_prefix
  value  = digitalocean_droplet.mdm-server.ipv4_address
}

# provision the VM
resource "null_resource" "provision" {

  depends_on = [
                digitalocean_droplet.mdm-server,
                digitalocean_record.micromdm-dns
               ]

  provisioner "remote-exec" {

    connection {
      host        = digitalocean_droplet.mdm-server.ipv4_address
      private_key = file("~/.ssh/do")
      timeout     = "50s"
    }

    inline = [
      "sudo yum install wget -y",
      "sudo yum install git -y",
      "wget https://dl.eff.org/certbot-auto",
      "mv ./certbot-auto /usr/local/bin/certbot-auto",
      "sudo chown root /usr/local/bin/certbot-auto",
      "sudo chmod 0755 /usr/local/bin/certbot-auto",
      "wget https://github.com/micromdm/micromdm/releases/download/v1.7.1/micromdm_v1.7.1.zip",
      "mkdir micromdm_repo",
      "wget -O /usr/local/bin/mdmdirector https://github.com/mdmdirector/mdmdirector/releases/download/v0.0.7/mdmdirector-linux",
      "chmod 755 /usr/local/bin/mdmdirector",
      "cat <<FILE2 > /usr/lib/systemd/system/micromdm.service",
      "${data.template_file.micromdm-service.rendered}",
      "FILE2",
      "cat <<FILE3 > /usr/lib/systemd/system/mdmdirector.service",
      "${data.template_file.mdmdirector-service.rendered}",
      "FILE3",

      "/usr/local/bin/certbot-auto --standalone certonly -n -d ${var.micromdm_prefix}.${var.dns_record} --agree-tos --email ${var.email}",
      "rm -rf /usr/local/bin/build/*",
      "/usr/bin/unzip -o ./micromdm_v1.7.1.zip -d /usr/local/bin/",
      "mv /usr/local/bin/build/linux/micromdm /usr/local/bin/micromdm",
      "systemctl daemon-reload",
      "systemctl enable micromdm.service",
      "systemctl restart micromdm.service",

      "systemctl daemon-reload",
      "systemctl enable mdmdirector.service",
      "systemctl restart mdmdirector.service",
    ]
  }

}
